type Distillery @model {
    id: ID!
    name: String
    dspID: String
    users: [String]
    batches: [Batch] @connection(keyName: "byDistillery", fields: ["id"])
}

type Batch @model
@key(name: "byDistillery", fields: ["distilleryID"]) {
    """
    id is generated by the builder
    """
    id: ID!
    distilleryID: ID!
    batchIdentifier: String
    batchNumber: Int
    status: Status
    type: String
    completedAt: AWSDateTime
    """
    createdAt and updatedAt are automatically populated by the Amplify GraphQL API on create and update
    """
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    distillery: Distillery @connection(fields: ["distilleryID"])
    measurements: [Measurement] @connection(keyName: "byBatch", fields: ["id"])
}

type Measurement @model
@key(name: "byBatch", fields: ["batchID"]) {
    """
    id is generated by the builder
    """
    id: ID!
    batchID: ID!
    trueProof: Float!
    temperature: Float!
    hydrometer: Float!
    temperatureCorrection: Float!
    hydrometerCorrection: Float!
    note: String
    flag: Boolean
    takenAt: AWSDateTime
    """
    createdAt and updatedAt are automatically populated by the Amplify GraphQL API on create and update
    """
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    batch: Batch @connection(fields: ["batchID"])
}

type User @model {
    id: ID!
    email: String
    defaultTemperatureUnit: TemperatureUnit
    defaultTemperatureCorrection: Float
    defaultHydrometerCorrection: Float
}

enum Status {
    ACTIVE,
    COMPLETE
}

enum TemperatureUnit {
    FAHRENHEIT,
    CELSIUS
}